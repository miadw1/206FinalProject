# -*- coding: utf-8 -*-
"""USE FINAL FOOTBALL FORECAST.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NjUr_7d2RUN-W0PGBmdNW-FUbXUvt5Ik
"""

import requests
import sqlite3
import matplotlib.pyplot as plt

# API Keys
weatherAPIkey = 'd273c16af6834a47950201709241604'
cfbAPIkey = 'AqtJDEUZayqfsNVrstvKqfXMT7eOINWbMNMwTn7tGc/MNETi/fsFvr1UsswpBjPH'

# Fetch weather data
def fetch_weather_data(api_key, city):
    url = f"http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        weather_data = response.json()
        #print("API Response:", weather_data)
        return {
            'city': city,
            'temperature': max(0, min(50, weather_data['current']['temp_c'])),
            'humidity': weather_data['current']['humidity'],
            'precipitation': weather_data['current'].get('precip_mm', 0),
            'condition': weather_data['current']['condition']['text']
        }
    except requests.RequestException as e:
        print(f"An error occurred fetching weather data: {e}")
        return None

# Fetch all college football data for the season
def fetch_cfb_data(api_key, season, max_week=15):
    all_games = []
    headers = {'Authorization': f'Bearer {api_key}'}

    for week in range(1, max_week + 1):
        url = f"https://api.collegefootballdata.com/games?year={season}&week={week}"
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            games = response.json()
            all_games.extend([
                {
                    'home_team': game['home_team'],
                    'away_team': game['away_team'],
                    'home_score': max(0, min(50, game.get('home_points') or 0)),
                    'away_score': max(0, min(50, game.get('away_points') or 0)),
                    'venue': game.get('venue', 'Unknown'),
                    'city': game.get('city', 'Unknown')
                }
                for game in games
            ])
        except requests.RequestException as e:
            print(f"An error occurred fetching college football data for week {week}: {e}")
            continue

    return all_games

# Update city information
def update_city_information(db_path, mapping):
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    for stadium, city in mapping.items():
        # Get or create the city_id for the given city
        city_id = get_or_create_id(conn, "cities", "city_name", city)
        venue_id = get_or_create_id(conn, "venues", "venue_name", stadium)

        # Update the games table to set the city_id based on the venue
        cursor.execute('''
            UPDATE games
            SET city_id = ?
            WHERE venue_id = ?
        ''', (city_id, venue_id))

    conn.commit()
    conn.close()

# Create database
def create_database():
    conn = sqlite3.connect('sports_weather3.db')
    c = conn.cursor()

    # Cities Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS cities (
            id INTEGER PRIMARY KEY,
            city_name TEXT UNIQUE
        )
    ''')

    # Teams Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS teams (
            id INTEGER PRIMARY KEY,
            team_name TEXT UNIQUE
        )
    ''')

    # Venues Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS venues (
            id INTEGER PRIMARY KEY,
            venue_name TEXT UNIQUE
        )
    ''')

    # Conditions Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS conditions (
            id INTEGER PRIMARY KEY,
            condition_name TEXT UNIQUE
        )
    ''')

    # Weather Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS weather (
            id INTEGER PRIMARY KEY,
            city_id INTEGER,
            condition_id INTEGER,
            temperature REAL,
            humidity INTEGER,
            precipitation REAL,
            FOREIGN KEY (city_id) REFERENCES cities (id),
            FOREIGN KEY (condition_id) REFERENCES conditions (id)
        )
    ''')

    # Games Table
    c.execute('''
        CREATE TABLE IF NOT EXISTS games (
            id INTEGER PRIMARY KEY,
            home_team_id INTEGER,
            away_team_id INTEGER,
            home_score INTEGER,
            away_score INTEGER,
            venue_id INTEGER,
            city_id INTEGER,
            FOREIGN KEY (home_team_id) REFERENCES teams (id),
            FOREIGN KEY (away_team_id) REFERENCES teams (id),
            FOREIGN KEY (venue_id) REFERENCES venues (id),
            FOREIGN KEY (city_id) REFERENCES cities (id)
        )
    ''')
    conn.commit()
    return conn

def insert_weather_data(conn, weather_data):
    city_id = get_or_create_id(conn, "cities", "city_name", weather_data['city'])
    condition_id = get_or_create_id(conn, "conditions", "condition_name", weather_data['condition'])
    c = conn.cursor()
    c.execute('''
        INSERT INTO weather (city_id, condition_id, temperature, humidity, precipitation)
        VALUES (?, ?, ?, ?, ?)
    ''', (city_id, condition_id, weather_data['temperature'], weather_data['humidity'], weather_data['precipitation']))

    conn.commit()

# Insert game data
def insert_game_data(conn, game_data):
    home_team_id = get_or_create_id(conn, "teams", "team_name", game_data['home_team'])
    away_team_id = get_or_create_id(conn, "teams", "team_name", game_data['away_team'])
    venue_id = get_or_create_id(conn, "venues", "venue_name", game_data['venue'])
    city_id = get_or_create_id(conn, "cities", "city_name", game_data['city'])
    c = conn.cursor()
    c.execute('''
        INSERT INTO games (home_team_id, away_team_id, home_score, away_score, venue_id, city_id)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (home_team_id, away_team_id, game_data['home_score'], game_data['away_score'], venue_id, city_id))
    conn.commit()

def get_or_create_id(conn, table_name, column_name, value):
    c = conn.cursor()
    c.execute(f'SELECT id FROM {table_name} WHERE {column_name} = ?', (value,))
    result = c.fetchone()
    if result:
        return result[0]
    else:
        c.execute(f'INSERT INTO {table_name} ({column_name}) VALUES (?)', (value,))
        conn.commit()
        return c.lastrowid

# Fetch combined data
def get_combined_data(conn):
    c = conn.cursor()
    c.execute('''
        SELECT c.city_name, t1.team_name AS home_team, t2.team_name AS away_team,
               g.home_score, g.away_score, v.venue_name, w.temperature, con.condition_name
        FROM games g
        JOIN cities c ON g.city_id = c.id
        JOIN teams t1 ON g.home_team_id = t1.id
        JOIN teams t2 ON g.away_team_id = t2.id
        JOIN venues v ON g.venue_id = v.id
        JOIN weather w ON g.city_id = w.city_id
        JOIN conditions con ON w.condition_id = con.id
    ''')
    return c.fetchall()

#debugging
# def check_weather_conditions(conn):
#     c = conn.cursor()
#     c.execute('SELECT DISTINCT condition_name FROM conditions')
#     conditions = c.fetchall()

# Fetch combined data filtered for sunny weather
def get_sunny_games(conn):
    c = conn.cursor()
    c.execute('''
        SELECT c.city_name, g.home_score
        FROM games g
        JOIN weather w ON g.city_id = w.city_id
        JOIN conditions con ON w.condition_id = con.id
        JOIN cities c ON g.city_id = c.id
        WHERE con.condition_name = 'Sunny'
    ''')
    sunny_games = c.fetchall()
    return sunny_games

def calculate_city_stats(conn):
    c = conn.cursor()
    c.execute('''
        SELECT c.city_name, COUNT(g.id) AS total_games,
               AVG(g.home_score) AS avg_home_score,
               AVG(g.away_score) AS avg_away_score,
               AVG(w.temperature) AS avg_temperature
        FROM games g
        JOIN cities c ON g.city_id = c.id
        JOIN weather w ON g.city_id = w.city_id
        GROUP BY c.city_name
    ''')
    return c.fetchall()

#write to a file
def write_data_to_file(data, filename):
  with open(filename, 'w') as file:
    file.write("City\tTotal Games\tAverage Home Score\tAverage Away Score\tAvg Temp (C)\n")
    for row in data:
      file.write(f"{row[0]}\t{row[1]}\t{row[2]:.2f}\t{row[3]:.3f}\t{row[4]:.4f}\n")

# Visualize the data
def visualize_sunny_scores(data):
    if not data:
        print("No data available for sunny conditions.")
        return

    # Separate data into cities and scores
    cities = [row[0] for row in data]
    scores = [row[1] for row in data]

    # Plot the data
    plt.figure(figsize=(10, 6))
    plt.bar(cities, scores, color='orange')
    plt.xlabel('City')
    plt.ylabel('Home Score')
    plt.title('Home Scores in Cities with Sunny Conditions')
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

def visualize_temp_vs_scores(conn):
    c = conn.cursor()
    c.execute('''
        SELECT w.temperature, (g.home_score + g.away_score) AS total_score
        FROM weather w
        JOIN games g ON w.city_id = g.city_id
    ''')
    data = c.fetchall()
    temps = [row[0] for row in data]
    scores = [row[1] for row in data]
    plt.scatter(temps, scores, alpha=0.5, color='blue')
    plt.xlabel('Temperature (C)')
    plt.ylabel('Total Game Score')
    plt.title('Temperature vs Total Game Scores')
    plt.show()

def visualize_average_scores(data):
  cities= [row[0] for row in data]
  avg_home_scores= [row[1] for row in data]
  avg_away_scores= [row[2] for row in data]

  plt.figure(figsize=(10, 6))
  plt.bar(cities, avg_home_scores, label= 'Average Home Score', alpha=0.7)
  plt.bar(cities, avg_away_scores, label= 'Average Away Score', alpha=0.7, bottom= avg_home_scores)
  plt.xlabel('City')
  plt.ylabel('Average Score')
  plt.title('Average Home and Away Scores by City')
  plt.xticks(rotation=45, ha='right')
  plt.legend()
  plt.tight_layout()
  plt.show()

def visualize_weather_conditions(data):
  cities= [row[0] for row in data]
  avg_temperature= [row[4] for row in data]

  fig,ax1= plt.subplots(figsize=(12,8))
  ax1.bar(cities, avg_temperature, label= 'Average Temperature (C)', color= 'orange', alpha=0.7)
  ax1.set_xlabel('City')
  ax1.set_ylabel('Average Temperature (C)')
  ax1.tick_params(axis= 'y')

  plt.title('Weather Conditions By City')
  plt.xticks(rotation=45, ha='right')
  plt.legend()
  plt.tight_layout()
  plt.show()

# Main execution
def main():
    #Create the database and get a connection
    stadium_to_city_mapping = {
    "Aviva Stadium": "Dublin, Ireland",
    "Memorial Stadium (Stephenville, TX)": "Stephenville, TX",
    "University Stadium (NM)": "Albuquerque, NM",
    "Cramton Bowl": "Montgomery, AL",
    "Center Parc Stadium": "Atlanta, GA",
    "Mackay Stadium": "Reno, NV",
    "Clarence T.C. Ching Athletics Complex": "Honolulu, HI",
    "Jackson Field": "Alpine, TX",
    "Superior Dome": "Marquette, MI",
    "SHI Stadium": "Piscataway, NJ",
    "Villanova Stadium": "Villanova, PA",
    "Jayne Stadium": "Morehead, KY",
    "Burke-Tarr Stadium": "Jefferson City, TN",
    "Doyt L. Perry Stadium": "Bowling Green, OH",
    "Ernest W. Spangler Stadium": "Boiling Springs, NC",
    "FBC Mortgage Stadium": "Orlando, FL",
    "Kelly/Shorts Stadium": "Mount Pleasant, MI",
    "West Family Stadium": "West Liberty, WV",
    "Duvall-Rosier Field": "Fairmont, WV",
    "Bearcat Stadium": "Maryville, MO",
    "Malone Stadium": "Monroe, LA",
    "MDU Resources Community Bowl": "Bismarck, ND",
    "Herb Parker Stadium": "Minot, ND",
    "Memorial Stadium (Wayne, NE)": "Wayne, NE",
    "Delaware Stadium": "Newark, DE",
    "Sox Harrison Stadium": "Edinboro, PA",
    "Chryst Field at Biemesderfer Stadium": "Millersville, PA",
    "Zable Stadium": "Williamsburg, VA",
    "UB Stadium": "Buffalo, NY",
    "Allegacy Federal Credit Union Stadium": "Winston-Salem, NC",
    "Carter-Finley Stadium": "Raleigh, NC",
    "Five Star Stadium at the Moye Complex": "Macon, GA",
    "Gable Field at Doc Wadley Stadium": "Tahlequah, OK",
    "Chet Anderson Stadium": "Bemidji, MN",
    "Bishop Schmitt Field": "Wheeling, WV",
    "Drake Stadium": "Des Moines, IA",
    "Glass Bowl": "Toledo, OH",
    "War Memorial Stadium (AR)": "Little Rock, AR",
    "Folsom Field": "Boulder, CO",
    "Memorial Stadium": "Columbia, MO",
    "Children's Mercy Park": "Kansas City, KS",
    "Homer Bryce Stadium": "Nacogdoches, TX",
    "Huntington Bank Stadium": "Minneapolis, MN",
    "Chapman Stadium": "Tulsa, OK",
    "Yulman Stadium": "New Orleans, LA",
    "Lewis Field Stadium": "Hays, KS",
    "Francis G. Welch Stadium": "Emporia, KS",
    "O'Shaughnessy Stadium": "St. Paul, MN",
    "O'Harra Stadium": "Rapid City, SD",
    "Javelina Stadium": "Kingsville, TX",
    "Memorial Stadium (Wichita Falls, TX)": "Wichita Falls, TX",
    "Sanchez Family Stadium": "Las Vegas, NM",
    "Elliott Field at Don Beebe Stadium": "Chadron, NE",
    "AmFirst Stadium": "Jacksonville, AL",
    "Protective Stadium": "Birmingham, AL",
    "DakotaDome": "Vermillion, SD",
    "Memorial Stadium (Champaign, IL)": "Champaign, IL",
    "Roos Field": "Cheney, WA",
    "Rice-Eccles Stadium": "Salt Lake City, UT",
    "CEFCU Stadium": "San Jose, CA",
    "Michie Stadium": "West Point, NY",
    "Alfond Stadium": "Orono, ME",
    "Memorial Stadium (Norman, OK)": "Norman, OK",
    "Spartan Stadium": "East Lansing, MI",
    "Wallace Wade Stadium": "Durham, NC",
    "Camp Randall Stadium": "Madison, WI",
    "Stanford Stadium": "Stanford, CA",
    "Maverik Stadium": "Logan, UT",
    "SECU Stadium": "College Park, MD",
    "Milan Puskar Stadium": "Morgantown, WV",
    "Navy-Marine Corps Memorial Stadium": "Annapolis, MD",
    "Welcome Stadium": "Dayton, OH",
    "Wagner College Stadium": "Staten Island, NY",
    "L&N Federal Credit Union Stadium": "Louisville, KY",
    "Acrisure Stadium": "Pittsburgh, PA",
    "Kinnick Stadium": "Iowa City, IA",
    "Ross-Ade Stadium": "West Lafayette, IN",
    "Mercedes-Benz Stadium": "Atlanta, GA",
    "FirstBank Stadium": "Nashville, TN",
    "Cooper Field": "Washington, DC",
    "Neyland Stadium": "Knoxville, TN",
    "Butler Bowl": "Indianapolis, IN",
    "Municipal Stadium": "Hagerstown, MD",
    "Mitchell Stadium": "Bluefield, WV",
    "Wildcat Stadium (GA)": "Fort Valley, GA",
    "George Williams Athletic Complex": "Raleigh, NC",
    "Fred Selfe Stadium at Nicewonder Field": "Emory, VA",
    "Boone Pickens Stadium": "Stillwater, OK",
    "Nippert Stadium": "Cincinnati, OH",
    "B.T. Harvey Stadium": "Atlanta, GA",
    "Alumni Stadium (KY)": "Frankfort, KY",
    "J.W. Babb Stadium": "Due West, SC",
    "Gesa Field": "Pullman, WA",
    "Memorial Stadium (Lincoln, NE)": "Lincoln, NE",
    "Memorial Stadium (Bloomington, IN)": "Bloomington, IN",
    "Lanny and Sharon Martin Stadium": "Evanston, IL",
    "Ohio Stadium": "Columbus, OH",
    "DKR-Texas Memorial Stadium": "Austin, TX",
    "Alamodome": "San Antonio, TX",
    "Ben Hill Griffin Stadium": "Gainesville, FL",
    "Kidd Brewer Stadium": "Boone, NC",
    "Falcon Stadium": "Colorado Springs, CO",
    "JMA Wireless Dome": "Syracuse, NY",
    "Jack Trice Stadium": "Ames, IA",
    "Huskie Stadium": "DeKalb, IL",
    "Warren McGuirk Alumni Stadium": "Amherst, MA",
    "Allen E. Paulson Stadium": "Statesboro, GA",
    "Walkup Skydome": "Flagstaff, AZ",
    "Ray Dennison Memorial Field": "Durango, CO",
    "Williams-Brice Stadium": "Columbia, SC",
    "Joan C. Edwards Stadium": "Huntington, WV",
    "Hancock Whitney Stadium": "Mobile, AL",
    "California Memorial Stadium": "Berkeley, CA",
    "UNI-Dome": "Cedar Falls, IA",
    "Williams Stadium (VA)": "Lynchburg, VA",
    "Buccaneer Field": "Charleston, SC",
    "Scott Stadium": "Charlottesville, VA",
    "Dowdy-Ficklen Stadium": "Greenville, NC",
    "Davis Wade Stadium": "Starkville, MS",
    "Armstrong Stadium": "Hampton, VA",
    "University Stadium (GA)": "Carrollton, GA",
    "Campus Field": "Fairfield, CT",
    "Alumni Memorial Stadium (NC)": "Salisbury, NC",
    "Spec Martin Municipal Stadium": "DeLand, FL",
    "Grace P. Johnson Stadium": "Pembroke, NC",
    "Bragg Memorial Stadium": "Tallahassee, FL",
    "Nissan Stadium": "Nashville, TN",
    "Reser Stadium": "Corvallis, OR",
    "Bob Ford Field": "Albany, NY",
    "Bryant-Denny Stadium": "Tuscaloosa, AL",
    "Rice Stadium": "Houston, TX",
    "Ratliff Stadium": "Odessa, TX",
    "Gayle and Tom Benson Stadium": "San Antonio, TX",
    "Panther Stadium": "Prairie View, TX",
    "Bazemore-Hyder Stadium": "Valdosta, GA",
    "Tiger Stadium (AL)": "Livingston, AL",
    "Veterans Memorial Stadium (AL)": "Troy, AL",
    "Centennial Bank Stadium": "Jonesboro, AR",
    "Johnny 'Red' Floyd Stadium": "Murfreesboro, TN",
    "Simmons Bank Liberty Stadium": "Memphis, TN",
    "Raymond James Stadium": "Tampa, FL",
    "McLane Stadium": "Waco, TX",
    "Bill Snyder Family Stadium": "Manhattan, KS",
    "Vaught-Hemingway Stadium": "Oxford, MS",
    "Meade Stadium": "Kingston, RI",
    "TDECU Stadium": "Houston, TX",
    "Joe Aillet Stadium": "Ruston, LA",
    "Snapdragon Stadium": "San Diego, CA",
    "LaVell Edwards Stadium": "Provo, UT",
    "Gerald J. Ford Stadium": "Dallas, TX",
    "Bobby Dodd Stadium": "Atlanta, GA",
    "Cajun Field": "Lafayette, LA",
    "Bobcat Stadium (TX)": "San Marcos, TX",
    "Jerry Richardson Stadium": "Charlotte, NC",
    "Cowboy Stadium": "Lake Charles, LA",
    "Torero Stadium": "San Diego, CA",
    "Washington-Grizzly Stadium": "Missoula, MT",
    "Aggie Memorial Stadium": "Las Cruces, NM",
    "Greater Zion Stadium": "St. George, UT",
    "Mountain America Stadium": "Tempe, AZ",
    "Arizona Stadium": "Tucson, AZ",
    "Husky Stadium": "Seattle, WA",
    "Hard Rock Stadium": "Miami Gardens, FL",
    "Tom Benson Hall of Fame Stadium": "Canton, OH",
    "Allegiant Stadium": "Las Vegas, NV",
    "Doak Campbell Stadium": "Tallahassee, FL"
}

    conn = create_database()

    c = conn.cursor()

    results = c.execute('SELECT COUNT(*) FROM weather')
    count = results.fetchone()[0]

    if count == 0:
      data = list(stadium_to_city_mapping.values())[count : count + 25]
    else:
      data = list(stadium_to_city_mapping.values())[count - 1: count + 24]

    for city in data:
        weather_data = fetch_weather_data(weatherAPIkey, city)
        if weather_data:
          insert_weather_data(conn, weather_data)

    results = c.execute('SELECT COUNT(*) FROM games')
    count = results.fetchone()[0]

    cfb_data = fetch_cfb_data(cfbAPIkey, 2024)  # Example season

    if count == 0:
      data = cfb_data[count : count + 25]
    else:
      data = cfb_data[count - 1: count + 24]

    for game in data:
        insert_game_data(conn, game)

    # Update city information
    update_city_information('sports_weather3.db', stadium_to_city_mapping)

    # Fetch sunny games data and visualize
    sunny_data = get_sunny_games(conn)
    visualize_sunny_scores(sunny_data)

    #city stats
    city_stats= calculate_city_stats(conn)
    write_data_to_file(city_stats, 'city_stats.txt')

    #visualize_total_games(city_stats)
    visualize_average_scores(city_stats)
    visualize_temp_vs_scores(conn)

    # Visualize weather conditions
    visualize_weather_conditions(city_stats)


    #Close the database connection
    conn.close()

if __name__ == "__main__":
    main()